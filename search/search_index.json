{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Writing with Digital Technology \u00b6 Resources \u00b6 Text editor HTML CSS Command Line Interface Git and Github Guides \u00b6 Build a static website with HTML and CSS \u00b6 Build a static site, part 1 (HTML) Build a static site, part 2 (CSS) Publish your site with Github Pages","title":"Home"},{"location":"#welcome-to-writing-with-digital-technology","text":"","title":"Welcome to Writing with Digital Technology"},{"location":"#resources","text":"Text editor HTML CSS Command Line Interface Git and Github","title":"Resources"},{"location":"#guides","text":"","title":"Guides"},{"location":"#build-a-static-website-with-html-and-css","text":"Build a static site, part 1 (HTML) Build a static site, part 2 (CSS) Publish your site with Github Pages","title":"Build a static website with HTML and CSS"},{"location":"explainers/accessibility/","text":"accessibility What is accessibility? \u00b6 What is accessibility | MDN web docs Accessibility resources \u00b6 a11yproject Writing for web accessibility \u00b6 Writing for Web Accessibility | w3C Web Accessibility Initiative HTML Accessibility | w3schools.com Writing HTML with accessibility in mind | Manuel Matuzovic Accessibility from Material Design Do and Don'ts on Designing for Accessibility from Gov.uk Accessibility Developer Guide Accessibility and font \u00b6 Accessible font sizing explained Tools to help you achieve accessibility \u00b6 WAVE Web Accessibility Evaluation Tool","title":"Accessibility"},{"location":"explainers/accessibility/#what-is-accessibility","text":"What is accessibility | MDN web docs","title":"What is accessibility?"},{"location":"explainers/accessibility/#accessibility-resources","text":"a11yproject","title":"Accessibility resources"},{"location":"explainers/accessibility/#writing-for-web-accessibility","text":"Writing for Web Accessibility | w3C Web Accessibility Initiative HTML Accessibility | w3schools.com Writing HTML with accessibility in mind | Manuel Matuzovic Accessibility from Material Design Do and Don'ts on Designing for Accessibility from Gov.uk Accessibility Developer Guide","title":"Writing for web accessibility"},{"location":"explainers/accessibility/#accessibility-and-font","text":"Accessible font sizing explained","title":"Accessibility and font"},{"location":"explainers/accessibility/#tools-to-help-you-achieve-accessibility","text":"WAVE Web Accessibility Evaluation Tool","title":"Tools to help you achieve accessibility"},{"location":"explainers/command-line-interface/","text":"There are two common ways to interact with most computers: the graphical user interface (GUI) and the command line interface (CLI) Most people are only familiar with the graphical user interface-- the system of graphical elements (e.g., windows, buttons, icons) that we can use to interact with our operating system. A less common, but incredibly useful way to interact with our computer is the command line interface. The CLI is a program that allows you to interact with your computer not through graphical elements, but rather through text-based commands . On Mac, the program used to interact with the CLI is called Terminal and on Windows it's called Command Prompt. A simple, illustrative example \u00b6 If it's helpful, you might think of a GUI as a program that issues text-based commands behind the scenes so you don't have to. In fact, several common tasks can be performed with either the GUI or CLI. For example, creating a new folder on your desktop. Creating a new folder on your desktop (Windows 10) GUI Above: creating a new folder via GUI (Windows 10) CLI Above: creating a new folder on your desktop via CLI (Windows 10) In the GUI, we can create a new folder by right-clicking on our desktop and selecting \"new folder.\" In the CLI, we can perform the same action through text commands. In the example above, I first navigate to the desktop by typing \"cd desktop\" and then create a new folder by typing \"mk-dir my_new_folder\" (i.e., make a directory in the current location and call it my_new_folder). Why use the command line? \u00b6 I have a mouse and applications...why even bother with the command line? Fosters a deeper understanding of how digital systems work Allows you to interact with systems to which you don't have graphical interface access Some functions are only available via CLI Can be more efficient for certain tasks Learn more \u00b6 Learn \"just enough command line\" to install programs","title":"Command line interface"},{"location":"explainers/command-line-interface/#a-simple-illustrative-example","text":"If it's helpful, you might think of a GUI as a program that issues text-based commands behind the scenes so you don't have to. In fact, several common tasks can be performed with either the GUI or CLI. For example, creating a new folder on your desktop. Creating a new folder on your desktop (Windows 10) GUI Above: creating a new folder via GUI (Windows 10) CLI Above: creating a new folder on your desktop via CLI (Windows 10) In the GUI, we can create a new folder by right-clicking on our desktop and selecting \"new folder.\" In the CLI, we can perform the same action through text commands. In the example above, I first navigate to the desktop by typing \"cd desktop\" and then create a new folder by typing \"mk-dir my_new_folder\" (i.e., make a directory in the current location and call it my_new_folder).","title":"A simple, illustrative example"},{"location":"explainers/command-line-interface/#why-use-the-command-line","text":"I have a mouse and applications...why even bother with the command line? Fosters a deeper understanding of how digital systems work Allows you to interact with systems to which you don't have graphical interface access Some functions are only available via CLI Can be more efficient for certain tasks","title":"Why use the command line?"},{"location":"explainers/command-line-interface/#learn-more","text":"Learn \"just enough command line\" to install programs","title":"Learn more"},{"location":"explainers/css/","text":"What is CSS? \u00b6 CSS stands for Cascading Style Sheets. While HTML provides the structure of a webpage and javascript allows us to add functionality, CSS controls the style. When we connect our CSS to HTML, we reunite content and presentation into a coherent webpage. This separation is important, though. It allows us as writer-designers to focus on content and presentation separately, even if they will be reunited in the final product. Further, it allows us to apply stylistic changes more efficiently. Just as the styles pane allows us to apply to documents created in Microsoft Word or Google Docs, CSS allows us to designate that we want all headings to be a certain font, size, color, etc. instead of manually modifying the style of each individual heading. For an example of the enormous control of presentation that CSS provides, check out CSS Zen Garden . The HTML is the same in each example; only the CSS has been modified. Intro to CSS \u00b6 CSS Basics CSS (collected resources from Mozilla Web Docs) CSS Guides on css-tricks.com CSS and Accessibility \u00b6 Accessible U: HTML and CSS WebAIM: Accessible CSS MDN Web Docs: CSS Grid Layout and Accessibility","title":"CSS"},{"location":"explainers/css/#what-is-css","text":"CSS stands for Cascading Style Sheets. While HTML provides the structure of a webpage and javascript allows us to add functionality, CSS controls the style. When we connect our CSS to HTML, we reunite content and presentation into a coherent webpage. This separation is important, though. It allows us as writer-designers to focus on content and presentation separately, even if they will be reunited in the final product. Further, it allows us to apply stylistic changes more efficiently. Just as the styles pane allows us to apply to documents created in Microsoft Word or Google Docs, CSS allows us to designate that we want all headings to be a certain font, size, color, etc. instead of manually modifying the style of each individual heading. For an example of the enormous control of presentation that CSS provides, check out CSS Zen Garden . The HTML is the same in each example; only the CSS has been modified.","title":"What is CSS?"},{"location":"explainers/css/#intro-to-css","text":"CSS Basics CSS (collected resources from Mozilla Web Docs) CSS Guides on css-tricks.com","title":"Intro to CSS"},{"location":"explainers/css/#css-and-accessibility","text":"Accessible U: HTML and CSS WebAIM: Accessible CSS MDN Web Docs: CSS Grid Layout and Accessibility","title":"CSS and Accessibility"},{"location":"explainers/dita/","text":"DITA stands for Darwin Information Typing Architecture . It is an open XML standard that is developed and maintained by the OASIS DITA Technical Committee Features \u00b6 Content Reuse. Content is written in small, tagged chunks to facilitate reuse across multiple documents and formats. Information Typing. DITA defines different types of information, specifically those that are frequently used by technical communicators. Tagging facilitates translation and localization. Companies can save money by translating and localizing bits of content once as opposed to every time it appears in a document. Conditional text. The DITA standard includes support for conditional text, so you specify what appears in different documents and outputs, e.g. exclude short descriptions of basic terms for expert audiences. What does DITA XML look like? \u00b6 Lorem ipsum... Sources \u00b6 Wikipedia. Darwin Information Typing Architecture","title":"Dita"},{"location":"explainers/dita/#features","text":"Content Reuse. Content is written in small, tagged chunks to facilitate reuse across multiple documents and formats. Information Typing. DITA defines different types of information, specifically those that are frequently used by technical communicators. Tagging facilitates translation and localization. Companies can save money by translating and localizing bits of content once as opposed to every time it appears in a document. Conditional text. The DITA standard includes support for conditional text, so you specify what appears in different documents and outputs, e.g. exclude short descriptions of basic terms for expert audiences.","title":"Features"},{"location":"explainers/dita/#what-does-dita-xml-look-like","text":"Lorem ipsum...","title":"What does DITA XML look like?"},{"location":"explainers/dita/#sources","text":"Wikipedia. Darwin Information Typing Architecture","title":"Sources"},{"location":"explainers/git-github/","text":"Git and Github \u00b6 When we write documents in Google Docs, we can collaborate with others in real time, share documents, download them, and store them in Google Drive. At least for me, Google Drive is now my central repository for all the documents I used to write in Microsoft Word. But how do we store, manage, share, and collaborate on files that Google Drive isn't built for, e.g. the HTML and CSS files that make a webpage? Git: a distributed version control system \u00b6 To understand Github, we first need to understand Git . Git is an open-source distributed version control system (DVCS) . Following my analogy to Google Drive, git provides functionality similar to \"track changes\" and \"version history\" in Google Docs. Git allows us to store, share, download, and edit files and folders, and it keeps a detailed record of every change we make. Git is primarily used by developers, but technical communicators increasingly find themselves using a DVCS, whether it's git or one of the handful of alternatives. As such, learning the language of git and getting some hands on practice can be incredibly valuable to technical communicators. For a great introduction to the most common Git commands, take 10 minutes to read What is a version control system? in Github Guides' Git Handbook. Github: a hosting platform for version control and collaboration \u00b6 Much like Google Drive, Github is a hosting platform. While Git provides the functionality to make and track changes to files and folders, Github is a hosting platform that leverages that functionality so that we can manage content and collaborate with others. While Git can be used from the command line , Github (and Github Desktop ) also enable you to use Git without ever entering the command line. To learn the basics of Github, complete the Hello World project in Github Guides' Git Handbook. Git-based workflows for collaboration \u00b6 To learn more about how to effectively use Git and Github to collaborate: Using Git and Github for Team Collaboration Github Pages \u00b6 We can use Git and Github for to manage and collaborate on code (e.g. the HTML and CSS files you might use to create a static website for your portfolio), but Github will also help us turn those files into a publically-available website through a service called Github Pages. Github Pages is one of many static site hosting services . Learn more about working with Github Pages or check out Github's Pages tutorial . Technical Communication and Git/Github \u00b6 Technical communicators can use Github to host their portfolio website, but given the prevalence of git and github-based workflows in the industry, a technical communicator's Github account itself can be a really important part of that portfolio. Praneesha Chandrsiri's Github basics in the eyes of a technical writer Sarah Maddox's notes on a Git-based technical writing workflow Tom Johnson's blog post on the genius of Github and how it can transform technical communication Short courses / tutorials for beginners \u00b6 Git and Github for Beginners - A Crash Course | freeCodeCamp.org","title":"Git and Github"},{"location":"explainers/git-github/#git-and-github","text":"When we write documents in Google Docs, we can collaborate with others in real time, share documents, download them, and store them in Google Drive. At least for me, Google Drive is now my central repository for all the documents I used to write in Microsoft Word. But how do we store, manage, share, and collaborate on files that Google Drive isn't built for, e.g. the HTML and CSS files that make a webpage?","title":"Git and Github"},{"location":"explainers/git-github/#git-a-distributed-version-control-system","text":"To understand Github, we first need to understand Git . Git is an open-source distributed version control system (DVCS) . Following my analogy to Google Drive, git provides functionality similar to \"track changes\" and \"version history\" in Google Docs. Git allows us to store, share, download, and edit files and folders, and it keeps a detailed record of every change we make. Git is primarily used by developers, but technical communicators increasingly find themselves using a DVCS, whether it's git or one of the handful of alternatives. As such, learning the language of git and getting some hands on practice can be incredibly valuable to technical communicators. For a great introduction to the most common Git commands, take 10 minutes to read What is a version control system? in Github Guides' Git Handbook.","title":"Git: a distributed version control system"},{"location":"explainers/git-github/#github-a-hosting-platform-for-version-control-and-collaboration","text":"Much like Google Drive, Github is a hosting platform. While Git provides the functionality to make and track changes to files and folders, Github is a hosting platform that leverages that functionality so that we can manage content and collaborate with others. While Git can be used from the command line , Github (and Github Desktop ) also enable you to use Git without ever entering the command line. To learn the basics of Github, complete the Hello World project in Github Guides' Git Handbook.","title":"Github: a hosting platform for version control and collaboration"},{"location":"explainers/git-github/#git-based-workflows-for-collaboration","text":"To learn more about how to effectively use Git and Github to collaborate: Using Git and Github for Team Collaboration","title":"Git-based workflows for collaboration"},{"location":"explainers/git-github/#github-pages","text":"We can use Git and Github for to manage and collaborate on code (e.g. the HTML and CSS files you might use to create a static website for your portfolio), but Github will also help us turn those files into a publically-available website through a service called Github Pages. Github Pages is one of many static site hosting services . Learn more about working with Github Pages or check out Github's Pages tutorial .","title":"Github Pages"},{"location":"explainers/git-github/#technical-communication-and-gitgithub","text":"Technical communicators can use Github to host their portfolio website, but given the prevalence of git and github-based workflows in the industry, a technical communicator's Github account itself can be a really important part of that portfolio. Praneesha Chandrsiri's Github basics in the eyes of a technical writer Sarah Maddox's notes on a Git-based technical writing workflow Tom Johnson's blog post on the genius of Github and how it can transform technical communication","title":"Technical Communication and Git/Github"},{"location":"explainers/git-github/#short-courses-tutorials-for-beginners","text":"Git and Github for Beginners - A Crash Course | freeCodeCamp.org","title":"Short courses / tutorials for beginners"},{"location":"explainers/html/","text":"What is HTML? \u00b6 HTML stands for Hypertext Markup Language. In a bit of an oversimplification, HTML gives structure to a webpage, while CSS controls style, and Javascript adds functionality. HTML also serves an important role in web accessibility. Learning HTML \u00b6 Chapter 9: HTML Basics in Open Technical Communication w3schools | HTML: The language for building web pages LinkedIn Learning | HTML Essential Training Mozilla Developer Network web docs | HTML HTML and Accessibility \u00b6 HTML: A good basis for accessibility | MDN web docs The Webflow guide to HTML5 semantic elements | Webflow Blog Three common accessibility pitfalls for developers: information and relationships | Julie Grundy Creating HTML layouts that meet accessibility standards Validate your html \u00b6 w3.org Nu HTML Checker Learn more about HTML \u00b6 Here are some excellent resources on the history of HTML and its application in technical communication. History/Background \u00b6 Chapter 2 - A history of HTML from \"Raggett on HTML 4\" A Brief History of HTML In Technical Communication \u00b6 Does a Technical Writer Need to Understand Web Design?","title":"HTML"},{"location":"explainers/html/#what-is-html","text":"HTML stands for Hypertext Markup Language. In a bit of an oversimplification, HTML gives structure to a webpage, while CSS controls style, and Javascript adds functionality. HTML also serves an important role in web accessibility.","title":"What is HTML?"},{"location":"explainers/html/#learning-html","text":"Chapter 9: HTML Basics in Open Technical Communication w3schools | HTML: The language for building web pages LinkedIn Learning | HTML Essential Training Mozilla Developer Network web docs | HTML","title":"Learning HTML"},{"location":"explainers/html/#html-and-accessibility","text":"HTML: A good basis for accessibility | MDN web docs The Webflow guide to HTML5 semantic elements | Webflow Blog Three common accessibility pitfalls for developers: information and relationships | Julie Grundy Creating HTML layouts that meet accessibility standards","title":"HTML and Accessibility"},{"location":"explainers/html/#validate-your-html","text":"w3.org Nu HTML Checker","title":"Validate your html"},{"location":"explainers/html/#learn-more-about-html","text":"Here are some excellent resources on the history of HTML and its application in technical communication.","title":"Learn more about HTML"},{"location":"explainers/html/#historybackground","text":"Chapter 2 - A history of HTML from \"Raggett on HTML 4\" A Brief History of HTML","title":"History/Background"},{"location":"explainers/html/#in-technical-communication","text":"Does a Technical Writer Need to Understand Web Design?","title":"In Technical Communication"},{"location":"explainers/markdown/","text":"What is markdown? \u00b6 Markdown is a lightweight markup language. Unlike other markup languages like HTML or XML (see \"What is markup?\" for more), Markdown was designed for readability . Designed for easy authoring \u00b6 For example, compare the syntax for these common formatting tasks: Desired Output Bold Italics Unordered list: Internet access Computer Coffee Ordered list: wake up drink coffee whistle while you work Required syntax HTML < strong > Bold </ strong > < em > Italics </ em > < p > Unordered list: </ p > < ul > < li > Internet access </ li > < li > Computer </ li > < li > Coffee </ li > </ ul > < p > Ordered list: </ p > < ol > < li > wake up </ li > < li > drink coffee </ li > < li > whistle while you work </ li > </ ol > Markdown **Bold** *Italics* Unordered list: * Internet access * Computer * Coffee Numbered list: 1. wake up 2. drink coffee 3. whistle while you work Although Markdown is arguably much easier to write, read, and edit than HTML, it doesn't replace HTML. Instead, Markdown is usually computationally converted to another format (often HTML) before it reaches its end reader, just as we might convert a word document to PDF. In fact, this web page was written in markdown before I used a static site generator called MkDocs to convert it to the HTML your browser is currently rendering. \"HTML is a publishing format, Markdown is a writing format\" -- John Gruber , Markdown co-creator As a result, the exact appearance of the resulting HTML is determined by CSS, not the Markdown itself. Comes in many flavors \u00b6 Since the release of the first iteration in 2004, many variations of Markdown have been developed for a variety of different use cases. Notable examples include Reddit-flavored Markdown and Github-flavored Markdown (GFM), each with unique conventions or additional features that are useful when writing content on Reddit and Github respectively. Tools for trying Markdown \u00b6 Markdown files are simply plain text, so you can create them in any text editor, but some editors have additional features that make writing in Markdown more enjoyable. A quick google will produce plenty of lists like this one: 4 open source Markdown editors . If you want an editor specialized for Markdown, here are a couple of options: Markdown Pad / Markdown Pad 2 (PC) iA Writer (Mac) Or, if you want to try out the syntax right now without leaving your browser, here are some in-browser Markdown editors: Dillinger - Online Markdown Editor Markdown Live Preview StackEdit - In-browser Markdown editor Finally, if you want to a quick, interactive tutorial on the basic syntax, I like this one on markdowntutorial.com . Learn more about Markdown \u00b6 Here are but a few fantastics resources, many by scholars and practioners in technical communication! History/Background \u00b6 Markdown co-creator John Gruber's discussion of the philosophy behind markdown The Markdown Movement | Aaron Beveridge Applications in technical communication \u00b6 Exploring Markdown Authoring to Publishing Workflows | Tom Johnson, I'd Rather Be Writing Why you should and should not use markdown | Peter Conrad via Medium The Ins and Outs of Using Markdown for Technical Writing Syntax Guides \u00b6 Markdown Cheat Sheet | markdownguide.org Mastering Markdown | Github Guides","title":"Markdown"},{"location":"explainers/markdown/#what-is-markdown","text":"Markdown is a lightweight markup language. Unlike other markup languages like HTML or XML (see \"What is markup?\" for more), Markdown was designed for readability .","title":"What is markdown?"},{"location":"explainers/markdown/#designed-for-easy-authoring","text":"For example, compare the syntax for these common formatting tasks: Desired Output Bold Italics Unordered list: Internet access Computer Coffee Ordered list: wake up drink coffee whistle while you work Required syntax HTML < strong > Bold </ strong > < em > Italics </ em > < p > Unordered list: </ p > < ul > < li > Internet access </ li > < li > Computer </ li > < li > Coffee </ li > </ ul > < p > Ordered list: </ p > < ol > < li > wake up </ li > < li > drink coffee </ li > < li > whistle while you work </ li > </ ol > Markdown **Bold** *Italics* Unordered list: * Internet access * Computer * Coffee Numbered list: 1. wake up 2. drink coffee 3. whistle while you work Although Markdown is arguably much easier to write, read, and edit than HTML, it doesn't replace HTML. Instead, Markdown is usually computationally converted to another format (often HTML) before it reaches its end reader, just as we might convert a word document to PDF. In fact, this web page was written in markdown before I used a static site generator called MkDocs to convert it to the HTML your browser is currently rendering. \"HTML is a publishing format, Markdown is a writing format\" -- John Gruber , Markdown co-creator As a result, the exact appearance of the resulting HTML is determined by CSS, not the Markdown itself.","title":"Designed for easy authoring"},{"location":"explainers/markdown/#comes-in-many-flavors","text":"Since the release of the first iteration in 2004, many variations of Markdown have been developed for a variety of different use cases. Notable examples include Reddit-flavored Markdown and Github-flavored Markdown (GFM), each with unique conventions or additional features that are useful when writing content on Reddit and Github respectively.","title":"Comes in many flavors"},{"location":"explainers/markdown/#tools-for-trying-markdown","text":"Markdown files are simply plain text, so you can create them in any text editor, but some editors have additional features that make writing in Markdown more enjoyable. A quick google will produce plenty of lists like this one: 4 open source Markdown editors . If you want an editor specialized for Markdown, here are a couple of options: Markdown Pad / Markdown Pad 2 (PC) iA Writer (Mac) Or, if you want to try out the syntax right now without leaving your browser, here are some in-browser Markdown editors: Dillinger - Online Markdown Editor Markdown Live Preview StackEdit - In-browser Markdown editor Finally, if you want to a quick, interactive tutorial on the basic syntax, I like this one on markdowntutorial.com .","title":"Tools for trying Markdown"},{"location":"explainers/markdown/#learn-more-about-markdown","text":"Here are but a few fantastics resources, many by scholars and practioners in technical communication!","title":"Learn more about Markdown"},{"location":"explainers/markdown/#historybackground","text":"Markdown co-creator John Gruber's discussion of the philosophy behind markdown The Markdown Movement | Aaron Beveridge","title":"History/Background"},{"location":"explainers/markdown/#applications-in-technical-communication","text":"Exploring Markdown Authoring to Publishing Workflows | Tom Johnson, I'd Rather Be Writing Why you should and should not use markdown | Peter Conrad via Medium The Ins and Outs of Using Markdown for Technical Writing","title":"Applications in technical communication"},{"location":"explainers/markdown/#syntax-guides","text":"Markdown Cheat Sheet | markdownguide.org Mastering Markdown | Github Guides","title":"Syntax Guides"},{"location":"explainers/server/","text":"","title":"Server"},{"location":"explainers/static-site-generator/","text":"","title":"Static site generator"},{"location":"explainers/static-vs-dynamic/","text":"Static vs. Dynamic Websites \u00b6 There are basically two types of websites: static and dynamic. Static \u00b6 Site is written in plain HTML, which is interpreted by the browser and then displayed to the user. Dynamic \u00b6 The server still sends HTML to the browser, but first it uses a scripting language like PHP to compile the site. In other words, the site content is not necessarily written in HTML.","title":"Static vs. Dynamic Websites"},{"location":"explainers/static-vs-dynamic/#static-vs-dynamic-websites","text":"There are basically two types of websites: static and dynamic.","title":"Static vs. Dynamic Websites"},{"location":"explainers/static-vs-dynamic/#static","text":"Site is written in plain HTML, which is interpreted by the browser and then displayed to the user.","title":"Static"},{"location":"explainers/static-vs-dynamic/#dynamic","text":"The server still sends HTML to the browser, but first it uses a scripting language like PHP to compile the site. In other words, the site content is not necessarily written in HTML.","title":"Dynamic"},{"location":"explainers/text-editor/","text":"What is a text editor? \u00b6 Here, a text editor refers to a type of program that allows you to write and edit plain text . Text editors are useful for people who write text-based content or code. Plain text vs. rich text \u00b6 Although we might not be able to tell when we open or write most documents, there are important differences between plain text and rich text . Word processing software such as Microsoft Word creates rich text-- text containing additional markup that specifies how the word processing software should display the text, e.g. typeface, size, paragraph spacing). Plain text, on the other hand, is just that: text characters with no hidden markup. Benefits of text editors \u00b6 There are a variety of popular text editors to choose from, many of which are free. As you look for one that suits your needs, some characteristics to look for include: Compatibility. Works on your operating system. Interface. Some are easier to work in than others. Aesthetics. The look and feel matters! Size and speed. Won't overload your computer and runs fast. Features. Integrates with other tools in your toolkit, supports code/syntax highlighting, etc. Popular text editors \u00b6 I'm currently using Visual Studio Code, but I've also used and liked Atom, Brackets, and Sublime Text. Check out TechRadar's \"Best Text Editors\" for a list and discussion of those and more! Alternatively, here are the home pages if you want to skip the discussion and go straight for the download. Atom Brackets Visual Studio Code Sublime Text","title":"Text editor"},{"location":"explainers/text-editor/#what-is-a-text-editor","text":"Here, a text editor refers to a type of program that allows you to write and edit plain text . Text editors are useful for people who write text-based content or code.","title":"What is a text editor?"},{"location":"explainers/text-editor/#plain-text-vs-rich-text","text":"Although we might not be able to tell when we open or write most documents, there are important differences between plain text and rich text . Word processing software such as Microsoft Word creates rich text-- text containing additional markup that specifies how the word processing software should display the text, e.g. typeface, size, paragraph spacing). Plain text, on the other hand, is just that: text characters with no hidden markup.","title":"Plain text vs. rich text"},{"location":"explainers/text-editor/#benefits-of-text-editors","text":"There are a variety of popular text editors to choose from, many of which are free. As you look for one that suits your needs, some characteristics to look for include: Compatibility. Works on your operating system. Interface. Some are easier to work in than others. Aesthetics. The look and feel matters! Size and speed. Won't overload your computer and runs fast. Features. Integrates with other tools in your toolkit, supports code/syntax highlighting, etc.","title":"Benefits of text editors"},{"location":"explainers/text-editor/#popular-text-editors","text":"I'm currently using Visual Studio Code, but I've also used and liked Atom, Brackets, and Sublime Text. Check out TechRadar's \"Best Text Editors\" for a list and discussion of those and more! Alternatively, here are the home pages if you want to skip the discussion and go straight for the download. Atom Brackets Visual Studio Code Sublime Text","title":"Popular text editors"},{"location":"explainers/wireframing-prototyping/","text":"Wireframing & prototyping \u00b6 Frameworks \u00b6 Tools \u00b6 Figma","title":"Wireframing & prototyping"},{"location":"explainers/wireframing-prototyping/#wireframing-prototyping","text":"","title":"Wireframing &amp; prototyping"},{"location":"explainers/wireframing-prototyping/#frameworks","text":"","title":"Frameworks"},{"location":"explainers/wireframing-prototyping/#tools","text":"Figma","title":"Tools"},{"location":"explainers/xml/","text":"","title":"Xml"},{"location":"resources/being-a-tech-writer/","text":"Amruta Ranade's Youtube Channel","title":"Being a tech writer"},{"location":"tools/tools/","text":"Sketching, wireframing, and prototyping \u00b6 Pencil \u00b6 Pencil is an open-source GUI prototyping tool that is available for Mac, Windows, and Linux. Adobe XD \u00b6 Adobe XD is a ux design tool for prototyping web and mobile apps. It is available for Mac and Windows. Figma \u00b6 Figma is a graphics editor and prototyping tool which is primarily web-based, with additional offline features enabled by desktop applications for macOS and Windows.","title":"Sketching, wireframing, and prototyping"},{"location":"tools/tools/#sketching-wireframing-and-prototyping","text":"","title":"Sketching, wireframing, and prototyping"},{"location":"tools/tools/#pencil","text":"Pencil is an open-source GUI prototyping tool that is available for Mac, Windows, and Linux.","title":"Pencil"},{"location":"tools/tools/#adobe-xd","text":"Adobe XD is a ux design tool for prototyping web and mobile apps. It is available for Mac and Windows.","title":"Adobe XD"},{"location":"tools/tools/#figma","text":"Figma is a graphics editor and prototyping tool which is primarily web-based, with additional offline features enabled by desktop applications for macOS and Windows.","title":"Figma"},{"location":"tutorials/build-local-static-HTML-site/","text":"Build a static site, part 1 (HTML) \u00b6 In this guide I'm going to provide resources and direction as you work to build a local, static HTML webpage. Local and static? \u00b6 Local. The site lives on your machine. You can view it in a web browser on your machine, but it isn't \"on the internet\" because no one else can access it through their web browser. Static. The site does not rely on server-side scripting (as in dynamic sites). The content is often written in html and the site relies only on HTML, CSS, and Javascript. Before you begin \u00b6 If you don't have a text editor installed, check out this list of popular text editors or Mozilla's Installing basic software . For a quick introduction to HTML, read Chapter 9: Introduction to HTML Basics in Open Technical Communication . For a more expansive introduction, I highly recommend Mozilla's Getting started with the Web , particularly Dealing with files and HTML Basics . For a more interactive tutorial, check out W3schools' HTML Tutorial . W3schools also has some pretty handy HTML reference documentation . Set up folders on your desktop for a new site \u00b6 Down the road, you can use a service to host your website, but for now we can set up the basic structure, add some content, and view the site locally. Create a folder for your web projects to live in \u00b6 I'll put mine on my desktop and call it \"web-projects\". In that folder, create another folder to store your website. \u00b6 I'll call mine \"portfolio-site-draft. Add subfolders to store images, styles, and scripts \u00b6 In your website folder, create three subfolders called images, styles, and scripts. You won't use these right away, but it's good to get in the habit of creating them now. Add and edit your homepage \u00b6 Static websites generally contain one HTML file for each webpage. Add a homepage \u00b6 Open your text editor, create a new file, and save it in your website folder (Desktop>>web-projects>>test-site-folder if you've been using my names). By convention, the hompage file is typically named \"index.html\" Check your work as you go! Open the index.html file in your browser. You should see the filepath in the url bar and a blank webpage below it. To check your work as you go, you can refresh this page in your browser each time you save changes to your index.html in your text editor. Add the common HTML elements to your homepage \u00b6 Nearly all html files will begin with the following elements: <!DOCTYPE> , < html > , < head > , < meta > , < title > , and < body > . If you are unsure what any of these elements does, Mozilla's HTML Basics has a great description of each. Check your work as you go! Save the index.html file and then refresh your browser. Does the content of your < title > element show up in the browser tab? Does the content of your < h1 > appear on the page? Add layout elements and content \u00b6 At this point, you can add layout elements and start incorporating your content. Common layout elements include < header > , < nav > , < section > , < article > , < footer > . Here are some additional resources on layout elements and semantic HTML: Using HTML sections and outlines Why, how, and when to use semantic html from css-tricks.com You have the bones of a homepage-- now we just need to add some style with CSS!","title":"Build a static website, part 1 (HTML)"},{"location":"tutorials/build-local-static-HTML-site/#build-a-static-site-part-1-html","text":"In this guide I'm going to provide resources and direction as you work to build a local, static HTML webpage.","title":"Build a static site, part 1 (HTML)"},{"location":"tutorials/build-local-static-HTML-site/#local-and-static","text":"Local. The site lives on your machine. You can view it in a web browser on your machine, but it isn't \"on the internet\" because no one else can access it through their web browser. Static. The site does not rely on server-side scripting (as in dynamic sites). The content is often written in html and the site relies only on HTML, CSS, and Javascript.","title":"Local and static?"},{"location":"tutorials/build-local-static-HTML-site/#before-you-begin","text":"If you don't have a text editor installed, check out this list of popular text editors or Mozilla's Installing basic software . For a quick introduction to HTML, read Chapter 9: Introduction to HTML Basics in Open Technical Communication . For a more expansive introduction, I highly recommend Mozilla's Getting started with the Web , particularly Dealing with files and HTML Basics . For a more interactive tutorial, check out W3schools' HTML Tutorial . W3schools also has some pretty handy HTML reference documentation .","title":"Before you begin"},{"location":"tutorials/build-local-static-HTML-site/#set-up-folders-on-your-desktop-for-a-new-site","text":"Down the road, you can use a service to host your website, but for now we can set up the basic structure, add some content, and view the site locally.","title":"Set up folders on your desktop for a new site"},{"location":"tutorials/build-local-static-HTML-site/#create-a-folder-for-your-web-projects-to-live-in","text":"I'll put mine on my desktop and call it \"web-projects\".","title":"Create a folder for your web projects to live in"},{"location":"tutorials/build-local-static-HTML-site/#in-that-folder-create-another-folder-to-store-your-website","text":"I'll call mine \"portfolio-site-draft.","title":"In that folder, create another folder to store your website."},{"location":"tutorials/build-local-static-HTML-site/#add-subfolders-to-store-images-styles-and-scripts","text":"In your website folder, create three subfolders called images, styles, and scripts. You won't use these right away, but it's good to get in the habit of creating them now.","title":"Add subfolders to store images, styles, and scripts"},{"location":"tutorials/build-local-static-HTML-site/#add-and-edit-your-homepage","text":"Static websites generally contain one HTML file for each webpage.","title":"Add and edit your homepage"},{"location":"tutorials/build-local-static-HTML-site/#add-a-homepage","text":"Open your text editor, create a new file, and save it in your website folder (Desktop>>web-projects>>test-site-folder if you've been using my names). By convention, the hompage file is typically named \"index.html\" Check your work as you go! Open the index.html file in your browser. You should see the filepath in the url bar and a blank webpage below it. To check your work as you go, you can refresh this page in your browser each time you save changes to your index.html in your text editor.","title":"Add a homepage"},{"location":"tutorials/build-local-static-HTML-site/#add-the-common-html-elements-to-your-homepage","text":"Nearly all html files will begin with the following elements: <!DOCTYPE> , < html > , < head > , < meta > , < title > , and < body > . If you are unsure what any of these elements does, Mozilla's HTML Basics has a great description of each. Check your work as you go! Save the index.html file and then refresh your browser. Does the content of your < title > element show up in the browser tab? Does the content of your < h1 > appear on the page?","title":"Add the common HTML elements to your homepage"},{"location":"tutorials/build-local-static-HTML-site/#add-layout-elements-and-content","text":"At this point, you can add layout elements and start incorporating your content. Common layout elements include < header > , < nav > , < section > , < article > , < footer > . Here are some additional resources on layout elements and semantic HTML: Using HTML sections and outlines Why, how, and when to use semantic html from css-tricks.com You have the bones of a homepage-- now we just need to add some style with CSS!","title":"Add layout elements and content"},{"location":"tutorials/publish-site-github-pages/","text":"Publish your site with Github pages \u00b6 This guide aims to help you publish a simple static site with Github Pages. It assumes some background knowledge of Git and Github . If you don't already have a Github account, you can make one now. This guide was written with user accounts in mind, but you may have the option to sign up under an enterprise account. I'll leave it to you to decide what account type makes the most sense. I've included links to Github's Pages tutorial below (option 2), but I think many will prefer to use Github Desktop. Or better yet, you can try it both ways! At any rate, I encourage you to see the remainder of this guide not as a comprehensive step-by-step walkthrough, but rather as a supplement to Github's official documentation and the many other great resources. Option 1: Use Github Desktop \u00b6 Use Github Desktop to turn the website folder on your desktop into a git repository, push the repository to Github, then publish to site using Github pages. No command line Requires Github Desktop Create your first repository with Github Desktop \u00b6 Navigate to Creating your first repository with Github Desktop . Read the introduction, install Github Desktop and authenticate your account. If this is your first time using Github, I recommend creating and cloning the tutorial website as directed. Alternatively, you can skip down to \"create a new repository\". Upon selecting \"Create a new repository\", you should have the option to tell Github Desktop what folder you'd like to use. You can tell it to create the repository in an existing folder or in a new folder, in which case you can add your HTML and CSS files into the folder after the fact. I already have a folder on my desktop called \"portfolio-demo\", so I'm putting the name of that folder in name and adjusting the local path. I'm also opting to initialize the repository with a readme. Publish your repo to Github \u00b6 Once you create the repository, Github Desktop will recognize it as a Git repository. Now we can \"publish\" the repository to Github.com. You'll have to make the repository public if you want to host the site with Github Pages, but you can always change the settings. Once you've finished publishing the repository, navigate to github.com (sign in if you aren't already) and find your repository. Publish your site with Github Pages \u00b6 From your repo page on Github.com, select \"settings\" and scroll down to \"Github Pages.\" Change the source to \"master\" and select the folder \"root.\" You should now be able to click the URL that follows \"Your site is published at\" to see your site live! If the link doesn't work immediately, wait a few minutes and try again. You can see my demo portfolio live at https://danieljcard1.github.io/portfolio-demo/ . Option 2: Follow the tutorial at pages.github.com \u00b6 Github Desktop not required Some command line recommended Github gives it's users one user site and unlimited project sites, so for now I recommend you select \"project site\". Tutorial: pages.github.com","title":"Publish your site with Github Pages"},{"location":"tutorials/publish-site-github-pages/#publish-your-site-with-github-pages","text":"This guide aims to help you publish a simple static site with Github Pages. It assumes some background knowledge of Git and Github . If you don't already have a Github account, you can make one now. This guide was written with user accounts in mind, but you may have the option to sign up under an enterprise account. I'll leave it to you to decide what account type makes the most sense. I've included links to Github's Pages tutorial below (option 2), but I think many will prefer to use Github Desktop. Or better yet, you can try it both ways! At any rate, I encourage you to see the remainder of this guide not as a comprehensive step-by-step walkthrough, but rather as a supplement to Github's official documentation and the many other great resources.","title":"Publish your site with Github pages"},{"location":"tutorials/publish-site-github-pages/#option-1-use-github-desktop","text":"Use Github Desktop to turn the website folder on your desktop into a git repository, push the repository to Github, then publish to site using Github pages. No command line Requires Github Desktop","title":"Option 1: Use Github Desktop"},{"location":"tutorials/publish-site-github-pages/#create-your-first-repository-with-github-desktop","text":"Navigate to Creating your first repository with Github Desktop . Read the introduction, install Github Desktop and authenticate your account. If this is your first time using Github, I recommend creating and cloning the tutorial website as directed. Alternatively, you can skip down to \"create a new repository\". Upon selecting \"Create a new repository\", you should have the option to tell Github Desktop what folder you'd like to use. You can tell it to create the repository in an existing folder or in a new folder, in which case you can add your HTML and CSS files into the folder after the fact. I already have a folder on my desktop called \"portfolio-demo\", so I'm putting the name of that folder in name and adjusting the local path. I'm also opting to initialize the repository with a readme.","title":"Create your first repository with Github Desktop"},{"location":"tutorials/publish-site-github-pages/#publish-your-repo-to-github","text":"Once you create the repository, Github Desktop will recognize it as a Git repository. Now we can \"publish\" the repository to Github.com. You'll have to make the repository public if you want to host the site with Github Pages, but you can always change the settings. Once you've finished publishing the repository, navigate to github.com (sign in if you aren't already) and find your repository.","title":"Publish your repo to Github"},{"location":"tutorials/publish-site-github-pages/#publish-your-site-with-github-pages_1","text":"From your repo page on Github.com, select \"settings\" and scroll down to \"Github Pages.\" Change the source to \"master\" and select the folder \"root.\" You should now be able to click the URL that follows \"Your site is published at\" to see your site live! If the link doesn't work immediately, wait a few minutes and try again. You can see my demo portfolio live at https://danieljcard1.github.io/portfolio-demo/ .","title":"Publish your site with Github Pages"},{"location":"tutorials/publish-site-github-pages/#option-2-follow-the-tutorial-at-pagesgithubcom","text":"Github Desktop not required Some command line recommended Github gives it's users one user site and unlimited project sites, so for now I recommend you select \"project site\". Tutorial: pages.github.com","title":"Option 2: Follow the tutorial at pages.github.com"},{"location":"tutorials/static-site-css/","text":"Build a static site, part 2 (CSS) \u00b6 In this guide, I'll provide resources and direction to help you add style to a static site. We'll accomplish this with CSS. Before you begin \u00b6 This guide assumes some comfort using a text editor and working knowledge of HTML (e.g., you know the common elements and can contruct the skeleton of a webpage). In addition, this guide assumes you've begun to learn the basics of CSS. If you haven't already, now is a great time to check out these CSS resources . Revisit your index.html file \u00b6 For the rest of this guide, I'll be modifying a sample index.html file. When I open my file in a browser, this is how it renders: Take note of the structure of my file. We'll be referencing these particular HTML elements and class names as we add style in our external stylesheet. <!DOCTYPE html> < html lang = en > < head > < meta charset = \"utf-8\" > < title > My test page </ title > < meta name = \"description\" content = \"The first draft of a personal website\" > < link rel = \"stylesheet\" type = \"text/css\" href = \"styles/style.css\" > </ head > < body > < div class = \"wrapper\" > < header > < h1 > Dan.com </ h1 > </ header > < nav class = \"navbar\" > < ul class = \"nav-links\" > < li class = \"nav-item\" > < a href = \"projects.html\" > Projects </ a > </ li > < li class = \"nav-item\" > < a href = \"CV.html\" > CV </ a > </ li > </ ul > </ nav > < main class = \"content\" > < article > < h2 > This is an h2 inside an article element </ h2 > < p > The article element is inside the main element. </ p > < img src = \"images/dan-card.jpg\" alt = \"Dan Card\" style = \"border-radius: 50%; max-width: 25%;\" > </ article > </ main > < footer > Dan Card. No need to copyright, 2020. </ footer > </ div > </ body > </ html > If it's helpful, you can create a new website folder on your desktop and copy the code from my sample into a new index.html file. Create your stylesheet \u00b6 My \"website\" currently lives in a folder called \"portfolio-site-draft\" on my desktop. The folder structure looks like this: portfolio-site-draft \u2502 \u2514\u2500\u2500\u2500index.html \u2502 \u2514\u2500\u2500\u2500images \u2502 \u2502 dan-card.jpg | \u2514\u2500\u2500\u2500scripts | \u2514\u2500\u2500\u2500styles \u2502 style.css The root level of my website folder contains one HTML file and three folders: one for images, one for scripts, and one for styles. A photo of me is in the images folder and my blank stylesheet is in the styles folder. If you don't already have a CSS file named \"style\" in your styles folder, now is a great time to add one! Tell the browser where to find the stylesheet \u00b6 I recommend using an external stylesheet instead of embedding your CSS via the < style > tag. Open index.html in your text editor and add the contents of line 8 between the < head > tags. This will tell the browser where to find your external stylesheet when it tries to render your HTML. <!DOCTYPE html> < html lang = en > < head > < meta charset = \"utf-8\" > < title > My test page </ title > < meta name = \"description\" content = \"The first draft of a personal website\" > < link rel = \"stylesheet\" type = \"text/css\" href = \"styles/style.css\" > </ head > < body > Add CSS to your stylesheet \u00b6 Now that we've linked our stylesheet and index file, let's add some style to our site. Open style.css in your text editor and and add the following: html { box-sizing : border-box ; } Here, we apply the CSS box-sizing property to everything within the < html > tags. We set the property value to border-box to make it easier to work with layout elements later. Formatting your CSS There are many valid ways to format your CSS . I have my own preferences, but you should figure out which approach you like and stick with it! Let's make a change that we can actually see in our browser. Specify the font for everything between the < body > tags. html { box-sizing : border-box ; } body { font-family : 'Open Sans' , Verdana , sans-serif ; } I can't be sure every browser will have Open Sans, so I add Verdana or any sans-serif as fallback options. Save your stylesheet and refresh your browser. Did the fonts change? Set up the layout \u00b6 CSS offers many ways to approach layout-- so many that it can be a little overwhelming. There is float , positioning , grid , flexbox , and more. For this guide, I'm using Flexbox . If we look back at my index file, we see that < div class = \"wrapper\" > contains our < header > , < nav > , < main > , and < footer > . We can apply the display property to the . wrapper selector. Since < header > , < nav > , < main > , and < footer > are all children of . wrapper , they will inherit the value we set for the display property. In this case, we'll use display : flex and flex-direction : column . I'm also setting min-height and padding . You can worry about those later or play with the values now to get a sense of what they do. body { font-family : 'Open Sans' , Verdana , sans-serif ; } . wrapper { display : flex ; flex-direction : column ; min-height : 100 vh ; padding : 0 px ; } Let's prepare a space to designate the style for each of . wrapper child elements. . wrapper { display : flex ; flex-direction : column ; min-height : 100 vh ; padding : 0 px ; } header { } nav { } main { } footer { } Now let's temporarily add some color to give us a sense of what elements are where. header { background-color : aqua ; } nav { background-color : blanchedalmond ; } main { background-color : cornflowerblue ; } footer { background-color : darkseagreen ; } I'll save those changes to style.css and refresh my browser. Now index.html renders like this: Using color You probably want to replace these colors at some point, but temporarily adding some color can be really helpful as you continue to make modifications to your elements. As you choose your own colors, consider how your color scheme will affect the accessibility of your site. Google's Material design system offers some helpful guidance on accessibility broadly and color and text legibility more specifically. You can also use WebAIM's contrast checker . When in doubt, black on white and white on black are unmatched when it comes to contrast! Continue to add and modify your CSS \u00b6 For example, let's say you want your main element to stretch downward so your footer isn't floating in the middle of the viewport. You also want the contents of main to be offset from edges of the box. We can use flex-grow and padding to accomplish this. main { background-color : cornflowerblue ; flex-grow : 1 ; padding : 20 px ; } It can be difficult at first to understand how the many properties and values will modify your site, but hopefully you now have the foundation to keep experimenting!","title":"Build a static website, part 2 (CSS)"},{"location":"tutorials/static-site-css/#build-a-static-site-part-2-css","text":"In this guide, I'll provide resources and direction to help you add style to a static site. We'll accomplish this with CSS.","title":"Build a static site, part 2 (CSS)"},{"location":"tutorials/static-site-css/#before-you-begin","text":"This guide assumes some comfort using a text editor and working knowledge of HTML (e.g., you know the common elements and can contruct the skeleton of a webpage). In addition, this guide assumes you've begun to learn the basics of CSS. If you haven't already, now is a great time to check out these CSS resources .","title":"Before you begin"},{"location":"tutorials/static-site-css/#revisit-your-indexhtml-file","text":"For the rest of this guide, I'll be modifying a sample index.html file. When I open my file in a browser, this is how it renders: Take note of the structure of my file. We'll be referencing these particular HTML elements and class names as we add style in our external stylesheet. <!DOCTYPE html> < html lang = en > < head > < meta charset = \"utf-8\" > < title > My test page </ title > < meta name = \"description\" content = \"The first draft of a personal website\" > < link rel = \"stylesheet\" type = \"text/css\" href = \"styles/style.css\" > </ head > < body > < div class = \"wrapper\" > < header > < h1 > Dan.com </ h1 > </ header > < nav class = \"navbar\" > < ul class = \"nav-links\" > < li class = \"nav-item\" > < a href = \"projects.html\" > Projects </ a > </ li > < li class = \"nav-item\" > < a href = \"CV.html\" > CV </ a > </ li > </ ul > </ nav > < main class = \"content\" > < article > < h2 > This is an h2 inside an article element </ h2 > < p > The article element is inside the main element. </ p > < img src = \"images/dan-card.jpg\" alt = \"Dan Card\" style = \"border-radius: 50%; max-width: 25%;\" > </ article > </ main > < footer > Dan Card. No need to copyright, 2020. </ footer > </ div > </ body > </ html > If it's helpful, you can create a new website folder on your desktop and copy the code from my sample into a new index.html file.","title":"Revisit your index.html file"},{"location":"tutorials/static-site-css/#create-your-stylesheet","text":"My \"website\" currently lives in a folder called \"portfolio-site-draft\" on my desktop. The folder structure looks like this: portfolio-site-draft \u2502 \u2514\u2500\u2500\u2500index.html \u2502 \u2514\u2500\u2500\u2500images \u2502 \u2502 dan-card.jpg | \u2514\u2500\u2500\u2500scripts | \u2514\u2500\u2500\u2500styles \u2502 style.css The root level of my website folder contains one HTML file and three folders: one for images, one for scripts, and one for styles. A photo of me is in the images folder and my blank stylesheet is in the styles folder. If you don't already have a CSS file named \"style\" in your styles folder, now is a great time to add one!","title":"Create your stylesheet"},{"location":"tutorials/static-site-css/#tell-the-browser-where-to-find-the-stylesheet","text":"I recommend using an external stylesheet instead of embedding your CSS via the < style > tag. Open index.html in your text editor and add the contents of line 8 between the < head > tags. This will tell the browser where to find your external stylesheet when it tries to render your HTML. <!DOCTYPE html> < html lang = en > < head > < meta charset = \"utf-8\" > < title > My test page </ title > < meta name = \"description\" content = \"The first draft of a personal website\" > < link rel = \"stylesheet\" type = \"text/css\" href = \"styles/style.css\" > </ head > < body >","title":"Tell the browser where to find the stylesheet"},{"location":"tutorials/static-site-css/#add-css-to-your-stylesheet","text":"Now that we've linked our stylesheet and index file, let's add some style to our site. Open style.css in your text editor and and add the following: html { box-sizing : border-box ; } Here, we apply the CSS box-sizing property to everything within the < html > tags. We set the property value to border-box to make it easier to work with layout elements later. Formatting your CSS There are many valid ways to format your CSS . I have my own preferences, but you should figure out which approach you like and stick with it! Let's make a change that we can actually see in our browser. Specify the font for everything between the < body > tags. html { box-sizing : border-box ; } body { font-family : 'Open Sans' , Verdana , sans-serif ; } I can't be sure every browser will have Open Sans, so I add Verdana or any sans-serif as fallback options. Save your stylesheet and refresh your browser. Did the fonts change?","title":"Add CSS to your stylesheet"},{"location":"tutorials/static-site-css/#set-up-the-layout","text":"CSS offers many ways to approach layout-- so many that it can be a little overwhelming. There is float , positioning , grid , flexbox , and more. For this guide, I'm using Flexbox . If we look back at my index file, we see that < div class = \"wrapper\" > contains our < header > , < nav > , < main > , and < footer > . We can apply the display property to the . wrapper selector. Since < header > , < nav > , < main > , and < footer > are all children of . wrapper , they will inherit the value we set for the display property. In this case, we'll use display : flex and flex-direction : column . I'm also setting min-height and padding . You can worry about those later or play with the values now to get a sense of what they do. body { font-family : 'Open Sans' , Verdana , sans-serif ; } . wrapper { display : flex ; flex-direction : column ; min-height : 100 vh ; padding : 0 px ; } Let's prepare a space to designate the style for each of . wrapper child elements. . wrapper { display : flex ; flex-direction : column ; min-height : 100 vh ; padding : 0 px ; } header { } nav { } main { } footer { } Now let's temporarily add some color to give us a sense of what elements are where. header { background-color : aqua ; } nav { background-color : blanchedalmond ; } main { background-color : cornflowerblue ; } footer { background-color : darkseagreen ; } I'll save those changes to style.css and refresh my browser. Now index.html renders like this: Using color You probably want to replace these colors at some point, but temporarily adding some color can be really helpful as you continue to make modifications to your elements. As you choose your own colors, consider how your color scheme will affect the accessibility of your site. Google's Material design system offers some helpful guidance on accessibility broadly and color and text legibility more specifically. You can also use WebAIM's contrast checker . When in doubt, black on white and white on black are unmatched when it comes to contrast!","title":"Set up the layout"},{"location":"tutorials/static-site-css/#continue-to-add-and-modify-your-css","text":"For example, let's say you want your main element to stretch downward so your footer isn't floating in the middle of the viewport. You also want the contents of main to be offset from edges of the box. We can use flex-grow and padding to accomplish this. main { background-color : cornflowerblue ; flex-grow : 1 ; padding : 20 px ; } It can be difficult at first to understand how the many properties and values will modify your site, but hopefully you now have the foundation to keep experimenting!","title":"Continue to add and modify your CSS"},{"location":"tutorials/use-DITA-structured-authoring/","text":"","title":"use DITA structured authoring"},{"location":"tutorials/using-publii/","text":"Using Publii \u00b6 Publii is part static site generator and part CMS. Publii homepage Publii docs Download and install Publii \u00b6 Navigate to https://getpublii.com/download/ and click the download link for your operating system. Once downloaded, install Publii and follow the prompts to create your first site. Configure your server \u00b6 Publii stores your site files locally, so you'll have to connect it to whatever service you are using to serve your site, e.g. Github Pages. Navigate to the server configuration section of the Publii docs and follow the instructions for whatever service you are using. Add content, customize menus, etc. \u00b6 Here is a demo site I created and hosted with Github pages. Here is a link to the Github repo","title":"Using Publii"},{"location":"tutorials/using-publii/#using-publii","text":"Publii is part static site generator and part CMS. Publii homepage Publii docs","title":"Using Publii"},{"location":"tutorials/using-publii/#download-and-install-publii","text":"Navigate to https://getpublii.com/download/ and click the download link for your operating system. Once downloaded, install Publii and follow the prompts to create your first site.","title":"Download and install Publii"},{"location":"tutorials/using-publii/#configure-your-server","text":"Publii stores your site files locally, so you'll have to connect it to whatever service you are using to serve your site, e.g. Github Pages. Navigate to the server configuration section of the Publii docs and follow the instructions for whatever service you are using.","title":"Configure your server"},{"location":"tutorials/using-publii/#add-content-customize-menus-etc","text":"Here is a demo site I created and hosted with Github pages. Here is a link to the Github repo","title":"Add content, customize menus, etc."}]}