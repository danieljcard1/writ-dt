{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Writing with Digital Technology \u00b6 Resources \u00b6 Text editor HTML Guides \u00b6 Build an introduction site (Static site, HTML & CSS)","title":"Home"},{"location":"#welcome-to-writing-with-digital-technology","text":"","title":"Welcome to Writing with Digital Technology"},{"location":"#resources","text":"Text editor HTML","title":"Resources"},{"location":"#guides","text":"Build an introduction site (Static site, HTML & CSS)","title":"Guides"},{"location":"explainers/accessibility/","text":"accessibility What is accessibility? \u00b6 What is accessibility | MDN web docs Writing for Web Accessibility \u00b6 Writing for Web Accessibility | w3C Web Accessibility Initiative HTML Accessibility | w3schools.com Writing HTML with accessibility in mind | Manuel Matuzovic Accessibility from Material Design Do and Don'ts on Designing for Accessibility from Gov.uk Accessibility Developer Guide How to check if your site is accessible \u00b6 WAVE Web Accessibility Evaluation Tool","title":"Accessibility"},{"location":"explainers/accessibility/#what-is-accessibility","text":"What is accessibility | MDN web docs","title":"What is accessibility?"},{"location":"explainers/accessibility/#writing-for-web-accessibility","text":"Writing for Web Accessibility | w3C Web Accessibility Initiative HTML Accessibility | w3schools.com Writing HTML with accessibility in mind | Manuel Matuzovic Accessibility from Material Design Do and Don'ts on Designing for Accessibility from Gov.uk Accessibility Developer Guide","title":"Writing for Web Accessibility"},{"location":"explainers/accessibility/#how-to-check-if-your-site-is-accessible","text":"WAVE Web Accessibility Evaluation Tool","title":"How to check if your site is accessible"},{"location":"explainers/command-line-interface/","text":"There are two common ways to interact with most computers: the graphical user interface (GUI) and the command line interface (CLI) Most people are only familiar with the graphical user interface-- the system of graphical elements (e.g., windows, buttons, icons) that we can use to interact with our operating system. A less common, but incredibly useful way to interact with our computer is the command line interface. The CLI is a program that allows you to interact with your computer not through graphical elements, but rather through text-based commands . On Mac, the program used to interact with the CLI is called Terminal and on Windows it's called Command Prompt. A simple, illustrative example \u00b6 If it's helpful, you might think of a GUI as a program that issues text-based commands behind the scenes so you don't have to. In fact, several common tasks can be performed with either the GUI or CLI. For example, creating a new folder on your desktop. Creating a new folder on your desktop (Windows 10) GUI Above: creating a new folder via GUI (Windows 10) CLI Above: creating a new folder on your desktop via CLI (Windows 10) Why use the command line? \u00b6 I have a mouse and applications...why even bother with the command line? Fosters a deeper understanding of how digital systems work Allows you to interact with systems to which you don't have graphical interface access Some functions are only available via CLI Can be more efficient for certain tasks Learn more about the command line interface \u00b6 History/Background \u00b6 Tutorials \u00b6 Reference guides \u00b6","title":"Command line interface"},{"location":"explainers/command-line-interface/#a-simple-illustrative-example","text":"If it's helpful, you might think of a GUI as a program that issues text-based commands behind the scenes so you don't have to. In fact, several common tasks can be performed with either the GUI or CLI. For example, creating a new folder on your desktop. Creating a new folder on your desktop (Windows 10) GUI Above: creating a new folder via GUI (Windows 10) CLI Above: creating a new folder on your desktop via CLI (Windows 10)","title":"A simple, illustrative example"},{"location":"explainers/command-line-interface/#why-use-the-command-line","text":"I have a mouse and applications...why even bother with the command line? Fosters a deeper understanding of how digital systems work Allows you to interact with systems to which you don't have graphical interface access Some functions are only available via CLI Can be more efficient for certain tasks","title":"Why use the command line?"},{"location":"explainers/command-line-interface/#learn-more-about-the-command-line-interface","text":"","title":"Learn more about the command line interface"},{"location":"explainers/command-line-interface/#historybackground","text":"","title":"History/Background"},{"location":"explainers/command-line-interface/#tutorials","text":"","title":"Tutorials"},{"location":"explainers/command-line-interface/#reference-guides","text":"","title":"Reference guides"},{"location":"explainers/css/","text":"What is CSS? \u00b6 CSS asics \u00b6 The power of CSS \u00b6 CSS Zen Garden","title":"What is CSS?"},{"location":"explainers/css/#what-is-css","text":"","title":"What is CSS?"},{"location":"explainers/css/#css-asics","text":"","title":"CSS asics"},{"location":"explainers/css/#the-power-of-css","text":"CSS Zen Garden","title":"The power of CSS"},{"location":"explainers/dita/","text":"DITA stands for Darwin Information Typing Architecture . It is an open XML standard that is developed and maintained by the OASIS DITA Technical Committee Features \u00b6 Content Reuse. Content is written in small, tagged chunks to facilitate reuse across multiple documents and formats. Information Typing. DITA defines different types of information, specifically those that are frequently used by technical communicators. Tagging facilitates translation and localization. Companies can save money by translating and localizing bits of content once as opposed to every time it appears in a document. Conditional text. The DITA standard includes support for conditional text, so you specify what appears in different documents and outputs, e.g. exclude short descriptions of basic terms for expert audiences. What does DITA XML look like? \u00b6 Lorem ipsum... Sources \u00b6 Wikipedia. Darwin Information Typing Architecture","title":"Dita"},{"location":"explainers/dita/#features","text":"Content Reuse. Content is written in small, tagged chunks to facilitate reuse across multiple documents and formats. Information Typing. DITA defines different types of information, specifically those that are frequently used by technical communicators. Tagging facilitates translation and localization. Companies can save money by translating and localizing bits of content once as opposed to every time it appears in a document. Conditional text. The DITA standard includes support for conditional text, so you specify what appears in different documents and outputs, e.g. exclude short descriptions of basic terms for expert audiences.","title":"Features"},{"location":"explainers/dita/#what-does-dita-xml-look-like","text":"Lorem ipsum...","title":"What does DITA XML look like?"},{"location":"explainers/dita/#sources","text":"Wikipedia. Darwin Information Typing Architecture","title":"Sources"},{"location":"explainers/html/","text":"What is HTML? \u00b6 HTML stands for Hypertext Markup Language. In a bit of an oversimplification, HTML gives structure to a webpage, while CSS controls style, and Javascript adds functionality. HTML also serves an important role in web accessibility. Learning HTML \u00b6 Chapter 9: HTML Basics in Open Technical Communication w3schools | HTML: The language for building web pages LinkedIn Learning | HTML Essential Training Mozilla Developer Network web docs | HTML HTML and Accessibility \u00b6 HTML: A good basis for accessibility | MDN web docs The Webflow guide to HTML5 semantic elements | Webflow Blog Three common accessibility pitfalls for developers: information and relationships | Julie Grundy Creating HTML layouts that meet accessibility standards Learn more about HTML \u00b6 Here are some excellent resources on the history of HTML and its application in technical communication. History/Background \u00b6 Chapter 2 - A history of HTML from \"Raggett on HTML 4\" A Brief History of HTML In Technical Communication \u00b6 Does a Technical Writer Need to Understand Web Design?","title":"What is HTML?"},{"location":"explainers/html/#what-is-html","text":"HTML stands for Hypertext Markup Language. In a bit of an oversimplification, HTML gives structure to a webpage, while CSS controls style, and Javascript adds functionality. HTML also serves an important role in web accessibility.","title":"What is HTML?"},{"location":"explainers/html/#learning-html","text":"Chapter 9: HTML Basics in Open Technical Communication w3schools | HTML: The language for building web pages LinkedIn Learning | HTML Essential Training Mozilla Developer Network web docs | HTML","title":"Learning HTML"},{"location":"explainers/html/#html-and-accessibility","text":"HTML: A good basis for accessibility | MDN web docs The Webflow guide to HTML5 semantic elements | Webflow Blog Three common accessibility pitfalls for developers: information and relationships | Julie Grundy Creating HTML layouts that meet accessibility standards","title":"HTML and Accessibility"},{"location":"explainers/html/#learn-more-about-html","text":"Here are some excellent resources on the history of HTML and its application in technical communication.","title":"Learn more about HTML"},{"location":"explainers/html/#historybackground","text":"Chapter 2 - A history of HTML from \"Raggett on HTML 4\" A Brief History of HTML","title":"History/Background"},{"location":"explainers/html/#in-technical-communication","text":"Does a Technical Writer Need to Understand Web Design?","title":"In Technical Communication"},{"location":"explainers/markdown/","text":"What is markdown? \u00b6 Markdown is a lightweight markup language. Unlike other markup languages like HTML or XML (see \"What is markup?\" for more), Markdown was designed for readability . Designed for easy authoring \u00b6 For example, compare the syntax for these common formatting tasks: Desired Output Bold Italics Unordered list: Internet access Computer Coffee Ordered list: wake up drink coffee whistle while you work Required syntax HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 < strong > Bold </ strong > < em > Italics </ em > < p > Unordered list: </ p > < ul > < li > Internet access </ li > < li > Computer </ li > < li > Coffee </ li > </ ul > < p > Ordered list: </ p > < ol > < li > wake up </ li > < li > drink coffee </ li > < li > whistle while you work </ li > </ ol > Markdown 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 **Bold** *Italics* Unordered list: * Internet access * Computer * Coffee Numbered list: 1. wake up 2. drink coffee 3. whistle while you work Although Markdown is arguably much easier to write, read, and edit than HTML, it doesn't replace HTML. Instead, Markdown is usually computationally converted to another format (often HTML) before it reaches its end reader, just as we might convert a word document to PDF. In fact, this web page was written in markdown before I used a static site generator called MkDocs to convert it to the HTML your browser is currently rendering. \"HTML is a publishing format, Markdown is a writing format\" -- John Gruber , Markdown co-creator As a result, the exact appearance of the resulting HTML is determined by CSS, not the Markdown itself. Comes in many flavors \u00b6 Since the release of the first iteration in 2004, many variations of Markdown have been developed for a variety of different use cases. Notable examples include Reddit-flavored Markdown and Github-flavored Markdown (GFM), each with unique conventions or additional features that are useful when writing content on Reddit and Github respectively. Tools for trying Markdown \u00b6 Markdown files are simply plain text, so you can create them in any text editor, but some editors have additional features that make writing in Markdown more enjoyable. A quick google will produce plenty of lists like this one: 4 open source Markdown editors . If you want an editor specialized for Markdown, here are a couple of options: Markdown Pad / Markdown Pad 2 (PC) iA Writer (Mac) Or, if you want to try out the syntax right now without leaving your browser, here are some in-browser Markdown editors: Dillinger - Online Markdown Editor Markdown Live Preview StackEdit - In-browser Markdown editor Finally, if you want to a quick, interactive tutorial on the basic syntax, I like this one on markdowntutorial.com . Learn more about Markdown \u00b6 Here are but a few fantastics resources, many by scholars and practioners in technical communication! History/Background \u00b6 Markdown co-creator John Gruber's discussion of the philosophy behind markdown The Markdown Movement | Aaron Beveridge Applications in technical communication \u00b6 Exploring Markdown Authoring to Publishing Workflows | Tom Johnson, I'd Rather Be Writing Why you should and should not use markdown | Peter Conrad via Medium The Ins and Outs of Using Markdown for Technical Writing Syntax Guides \u00b6 Markdown Cheat Sheet | markdownguide.org Mastering Markdown | Github Guides","title":"What is markdown?"},{"location":"explainers/markdown/#what-is-markdown","text":"Markdown is a lightweight markup language. Unlike other markup languages like HTML or XML (see \"What is markup?\" for more), Markdown was designed for readability .","title":"What is markdown?"},{"location":"explainers/markdown/#designed-for-easy-authoring","text":"For example, compare the syntax for these common formatting tasks: Desired Output Bold Italics Unordered list: Internet access Computer Coffee Ordered list: wake up drink coffee whistle while you work Required syntax HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 < strong > Bold </ strong > < em > Italics </ em > < p > Unordered list: </ p > < ul > < li > Internet access </ li > < li > Computer </ li > < li > Coffee </ li > </ ul > < p > Ordered list: </ p > < ol > < li > wake up </ li > < li > drink coffee </ li > < li > whistle while you work </ li > </ ol > Markdown 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 **Bold** *Italics* Unordered list: * Internet access * Computer * Coffee Numbered list: 1. wake up 2. drink coffee 3. whistle while you work Although Markdown is arguably much easier to write, read, and edit than HTML, it doesn't replace HTML. Instead, Markdown is usually computationally converted to another format (often HTML) before it reaches its end reader, just as we might convert a word document to PDF. In fact, this web page was written in markdown before I used a static site generator called MkDocs to convert it to the HTML your browser is currently rendering. \"HTML is a publishing format, Markdown is a writing format\" -- John Gruber , Markdown co-creator As a result, the exact appearance of the resulting HTML is determined by CSS, not the Markdown itself.","title":"Designed for easy authoring"},{"location":"explainers/markdown/#comes-in-many-flavors","text":"Since the release of the first iteration in 2004, many variations of Markdown have been developed for a variety of different use cases. Notable examples include Reddit-flavored Markdown and Github-flavored Markdown (GFM), each with unique conventions or additional features that are useful when writing content on Reddit and Github respectively.","title":"Comes in many flavors"},{"location":"explainers/markdown/#tools-for-trying-markdown","text":"Markdown files are simply plain text, so you can create them in any text editor, but some editors have additional features that make writing in Markdown more enjoyable. A quick google will produce plenty of lists like this one: 4 open source Markdown editors . If you want an editor specialized for Markdown, here are a couple of options: Markdown Pad / Markdown Pad 2 (PC) iA Writer (Mac) Or, if you want to try out the syntax right now without leaving your browser, here are some in-browser Markdown editors: Dillinger - Online Markdown Editor Markdown Live Preview StackEdit - In-browser Markdown editor Finally, if you want to a quick, interactive tutorial on the basic syntax, I like this one on markdowntutorial.com .","title":"Tools for trying Markdown"},{"location":"explainers/markdown/#learn-more-about-markdown","text":"Here are but a few fantastics resources, many by scholars and practioners in technical communication!","title":"Learn more about Markdown"},{"location":"explainers/markdown/#historybackground","text":"Markdown co-creator John Gruber's discussion of the philosophy behind markdown The Markdown Movement | Aaron Beveridge","title":"History/Background"},{"location":"explainers/markdown/#applications-in-technical-communication","text":"Exploring Markdown Authoring to Publishing Workflows | Tom Johnson, I'd Rather Be Writing Why you should and should not use markdown | Peter Conrad via Medium The Ins and Outs of Using Markdown for Technical Writing","title":"Applications in technical communication"},{"location":"explainers/markdown/#syntax-guides","text":"Markdown Cheat Sheet | markdownguide.org Mastering Markdown | Github Guides","title":"Syntax Guides"},{"location":"explainers/server/","text":"","title":"Server"},{"location":"explainers/static-site-generator/","text":"","title":"Static site generator"},{"location":"explainers/static-vs-dynamic/","text":"Static vs. Dynamic Websites \u00b6 There are basically two types of websites: static and dynamic. Static \u00b6 Site is written in plain HTML, which is interpreted by the browser and then displayed to the user. Dynamic \u00b6 The server still sends HTML to the browser, but first it uses a scripting language like PHP to compile the site. In other words, the site content is not necessarily written in HTML.","title":"Static vs. Dynamic Websites"},{"location":"explainers/static-vs-dynamic/#static-vs-dynamic-websites","text":"There are basically two types of websites: static and dynamic.","title":"Static vs. Dynamic Websites"},{"location":"explainers/static-vs-dynamic/#static","text":"Site is written in plain HTML, which is interpreted by the browser and then displayed to the user.","title":"Static"},{"location":"explainers/static-vs-dynamic/#dynamic","text":"The server still sends HTML to the browser, but first it uses a scripting language like PHP to compile the site. In other words, the site content is not necessarily written in HTML.","title":"Dynamic"},{"location":"explainers/text-editor/","text":"What is a text editor? \u00b6 Here, a text editor refers to a type of program that allows you to write and edit plain text . Text editors are useful for people who write text-based content or code. Plain text vs. rich text \u00b6 Although we might not be able to tell when we open or write most documents, there are important differences between plain text and rich text . Word processing software such as Microsoft Word creates rich text-- text containing additional markup that specifies how the word processing software should display the text, e.g. typeface, size, paragraph spacing). Plain text, on the other hand, is just that: text characters with no hidden markup. Benefits of text editors \u00b6 There are a variety of popular text editors to choose from, many of which are free. As you look for one that suits your needs, some characteristics to look for include: Compatibility. Works on your operating system. Interface. Some are easier to work in than others. Aesthetics. The look and feel matters! Size and speed. Won't overload your computer and runs fast. Features. Integrates with other tools in your toolkit, supports code/syntax highlighting, etc. Popular text editors \u00b6 I'm currently using Visual Studio Code, but I've also used and liked Atom, Brackets, and Sublime Text. Check out TechRadar's \"Best Text Editors\" for a list and discussion of those and more! Alternatively, here are the home pages if you want to skip the discussion and go straight for the download. Atom Brackets Visual Studio Code Sublime Text","title":"What is a text editor?"},{"location":"explainers/text-editor/#what-is-a-text-editor","text":"Here, a text editor refers to a type of program that allows you to write and edit plain text . Text editors are useful for people who write text-based content or code.","title":"What is a text editor?"},{"location":"explainers/text-editor/#plain-text-vs-rich-text","text":"Although we might not be able to tell when we open or write most documents, there are important differences between plain text and rich text . Word processing software such as Microsoft Word creates rich text-- text containing additional markup that specifies how the word processing software should display the text, e.g. typeface, size, paragraph spacing). Plain text, on the other hand, is just that: text characters with no hidden markup.","title":"Plain text vs. rich text"},{"location":"explainers/text-editor/#benefits-of-text-editors","text":"There are a variety of popular text editors to choose from, many of which are free. As you look for one that suits your needs, some characteristics to look for include: Compatibility. Works on your operating system. Interface. Some are easier to work in than others. Aesthetics. The look and feel matters! Size and speed. Won't overload your computer and runs fast. Features. Integrates with other tools in your toolkit, supports code/syntax highlighting, etc.","title":"Benefits of text editors"},{"location":"explainers/text-editor/#popular-text-editors","text":"I'm currently using Visual Studio Code, but I've also used and liked Atom, Brackets, and Sublime Text. Check out TechRadar's \"Best Text Editors\" for a list and discussion of those and more! Alternatively, here are the home pages if you want to skip the discussion and go straight for the download. Atom Brackets Visual Studio Code Sublime Text","title":"Popular text editors"},{"location":"explainers/xml/","text":"","title":"Xml"},{"location":"resources/being-a-tech-writer/","text":"Amruta Ranade's Youtube Channel","title":"Being a tech writer"},{"location":"tutorials/build-local-static-HTML-site/","text":"Build your introduction site \u00b6 In this guide I'm going to provide resources and direction as you work to build a local, static HTML webpage. Local and static? \u00b6 Local. The site lives on your machine. You can view it in a web browser on your machine, but it isn't \"on the internet\" because no one else can access it through their web browser. Static. The site does not rely on server-side scripting (as in dynamic sites). The content is often written in html and the site relies only on HTML, CSS, and Javascript. Before you begin \u00b6 If you don't have a text editor installed, check out this list of popular text editors or Mozilla's Installing basic software . For a quick introduction to HTML, read Chapter 9: Introduction to HTML Basics in Open Technical Communication . For a more expansive introduction, I highly recommend Mozilla's Getting started with the Web , particularly Dealing with files and HTML Basics . For a more interactive tutorial, check out W3schools' HTML Tutorial . W3schools also has some pretty handy HTML reference documentation . Set up folders on your desktop for a new site \u00b6 Down the road, you can use a service to host your website, but for now we can set up the basic structure, add some content, and view the site locally. Create a folder for your web projects to live in \u00b6 I'll put mine on my desktop and call it \"web-projects\". In that folder, create another folder to store your website. \u00b6 I'll call mine \"portfolio-site-draft. Add subfolders to store images, styles, and scripts \u00b6 In your website folder, create three subfolders called images, styles, and scripts. You won't use these right away, but it's good to get in the habit of creating them now. Add and edit your homepage \u00b6 Static websites generally contain one HTML file for each webpage. Add a homepage \u00b6 Open your text editor, create a new file, and save it in your website folder (Desktop>>web-projects>>test-site-folder if you've been using my names). By convention, the hompage file is typically named \"index.html\" Check your work as you go! Open the index.html file in your browser. You should see the filepath in the url bar and a blank webpage below it. To check your work as you go, you can refresh this page in your browser each time you save changes to your index.html in your text editor. Add the common HTML elements to your homepage \u00b6 Nearly all html files will begin with the following elements: <!DOCTYPE> , < html > , < head > , < meta > , < title > , and < body > . If you are unsure what any of these elements does, Mozilla's HTML Basics has a great description of each. Check your work as you go! Save the index.html file and then refresh your browser. Does the content of your < title > element show up in the browser tab? Does the content of your < h1 > appear on the page? Add layout elements and content \u00b6 At this point, you can add layout elements and start incorporating your content. Common layout elements include < header > , < nav > , < section > , < article > , < footer > . Here are some additional resources on layout elements and semantic HTML: Using HTML sections and outlines Why, how, and when to use semantic html from css-tricks.com At this point, you have the bones of a homepage. Now we just need to add some style with CSS!","title":"Build your intro site with HTML"},{"location":"tutorials/build-local-static-HTML-site/#build-your-introduction-site","text":"In this guide I'm going to provide resources and direction as you work to build a local, static HTML webpage.","title":"Build your introduction site"},{"location":"tutorials/build-local-static-HTML-site/#local-and-static","text":"Local. The site lives on your machine. You can view it in a web browser on your machine, but it isn't \"on the internet\" because no one else can access it through their web browser. Static. The site does not rely on server-side scripting (as in dynamic sites). The content is often written in html and the site relies only on HTML, CSS, and Javascript.","title":"Local and static?"},{"location":"tutorials/build-local-static-HTML-site/#before-you-begin","text":"If you don't have a text editor installed, check out this list of popular text editors or Mozilla's Installing basic software . For a quick introduction to HTML, read Chapter 9: Introduction to HTML Basics in Open Technical Communication . For a more expansive introduction, I highly recommend Mozilla's Getting started with the Web , particularly Dealing with files and HTML Basics . For a more interactive tutorial, check out W3schools' HTML Tutorial . W3schools also has some pretty handy HTML reference documentation .","title":"Before you begin"},{"location":"tutorials/build-local-static-HTML-site/#set-up-folders-on-your-desktop-for-a-new-site","text":"Down the road, you can use a service to host your website, but for now we can set up the basic structure, add some content, and view the site locally.","title":"Set up folders on your desktop for a new site"},{"location":"tutorials/build-local-static-HTML-site/#create-a-folder-for-your-web-projects-to-live-in","text":"I'll put mine on my desktop and call it \"web-projects\".","title":"Create a folder for your web projects to live in"},{"location":"tutorials/build-local-static-HTML-site/#in-that-folder-create-another-folder-to-store-your-website","text":"I'll call mine \"portfolio-site-draft.","title":"In that folder, create another folder to store your website."},{"location":"tutorials/build-local-static-HTML-site/#add-subfolders-to-store-images-styles-and-scripts","text":"In your website folder, create three subfolders called images, styles, and scripts. You won't use these right away, but it's good to get in the habit of creating them now.","title":"Add subfolders to store images, styles, and scripts"},{"location":"tutorials/build-local-static-HTML-site/#add-and-edit-your-homepage","text":"Static websites generally contain one HTML file for each webpage.","title":"Add and edit your homepage"},{"location":"tutorials/build-local-static-HTML-site/#add-a-homepage","text":"Open your text editor, create a new file, and save it in your website folder (Desktop>>web-projects>>test-site-folder if you've been using my names). By convention, the hompage file is typically named \"index.html\" Check your work as you go! Open the index.html file in your browser. You should see the filepath in the url bar and a blank webpage below it. To check your work as you go, you can refresh this page in your browser each time you save changes to your index.html in your text editor.","title":"Add a homepage"},{"location":"tutorials/build-local-static-HTML-site/#add-the-common-html-elements-to-your-homepage","text":"Nearly all html files will begin with the following elements: <!DOCTYPE> , < html > , < head > , < meta > , < title > , and < body > . If you are unsure what any of these elements does, Mozilla's HTML Basics has a great description of each. Check your work as you go! Save the index.html file and then refresh your browser. Does the content of your < title > element show up in the browser tab? Does the content of your < h1 > appear on the page?","title":"Add the common HTML elements to your homepage"},{"location":"tutorials/build-local-static-HTML-site/#add-layout-elements-and-content","text":"At this point, you can add layout elements and start incorporating your content. Common layout elements include < header > , < nav > , < section > , < article > , < footer > . Here are some additional resources on layout elements and semantic HTML: Using HTML sections and outlines Why, how, and when to use semantic html from css-tricks.com At this point, you have the bones of a homepage. Now we just need to add some style with CSS!","title":"Add layout elements and content"},{"location":"tutorials/publish-site-github-pages/","text":"","title":"Publish site github pages"},{"location":"tutorials/use-DITA-structured-authoring/","text":"","title":"use DITA structured authoring"}]}